# This workflow often runs following steps when a PR is merged to main branch.
# 1. jobs.check checks if we need to release
# 2. jobs.release publish packages
#
# Note: Force publish
# You can publish packages manually by running workflow dispatch
# This workflow dispatch skip jobs.check process
# 1. dispatch "release" workflow
# 2. Open Release Page
# 3. Generate Release Note
name: Release

on:
  pull_request:
    branches:
      - develop
      - master
    types: [closed]
  workflow_dispatch: # force release
    inputs:
      version:
        description: 'bump release version'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  # check:
  #   permissions:
  #     contents: read
  #   runs-on: ubuntu-latest
  #   # when release PR is merged or workflow_dispatch is triggered, run this job
  #   if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
  #   outputs:
  #     EXISTS_TAG: ${{ steps.tag_check.outputs.EXISTS_TAG }}
  #   steps:
  #     - name: Checkout
  #       uses: CoolColdUK/checkout@v4
  #     - name: Set PACKAGE_VERSION
  #       run: echo "PACKAGE_VERSION=$(cat lerna.json | jq -r .version)" >> $GITHUB_ENV
  #     - name: Tag Check
  #       id: tag_check
  #       run: |
  #         GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/${TAG_NAME}"
  #         http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
  #           -H "Authorization: token ${GITHUB_TOKEN}")
  #         if [ "$http_status_code" -ne "404" ] ; then
  #           echo "EXISTS_TAG=true" >> $GITHUB_OUTPUT
  #         else
  #           echo "EXISTS_TAG=false" >> $GITHUB_OUTPUT
  #         fi
  #       env:
  #         TAG_NAME: v${{ env.PACKAGE_VERSION }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ubuntu-latest
    # needs: check
    # if: always() && (needs.check.outputs.EXISTS_TAG == 'false')
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
    steps:
      - name: Checkout
        uses: CoolColdUK/checkout@v4
      - name: Setup Node
        uses: CoolColdUK/setup-node@v4
        with:
          node-version: 20
          # registry-url: 'https://npm.pkg.github.com' # [EXAMPLE]
          # for publishing packages to npm
          # registry-url: https://registry.npmjs.org
      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install
        run: npm i
      - name: Build
        run: npm run ci:build
      - name: bump patch
        if: inputs.version=='patch'
        run: npm run release:patch
      - name: bump minor
        if: inputs.version=='minor'
        run: npm run release:minor
      - name: bump major
        if: inputs.version=='major'
        run: npm run release:major
      - name: Pack
        run: npm run pack
      - name: Set PACKAGE_VERSION
        run: echo "PACKAGE_VERSION=$(cat lerna.json | jq -r .version)" >> $GITHUB_ENV
      # - name: Publish
      #   run: npm run ci:release
      #   env:
      #     # actions/setup-node create .npmrc with `NODE_AUTH_TOKEN` env if `registry-url` is defined
      #     # === `echo "${ registry-url }/:_authToken=${ NODE_AUTH_TOKEN }" > .npmrc`
      #     NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # [EXAMPLE]
      #     # for publishing packages to npm
      #     # NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Git Tag
        uses: CoolColdUK/git-tag-action@v3
        with:
          version: ${{ env.PACKAGE_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: 'v'
      - name: Create Release
        id: create_release
        uses: CoolColdUK/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          # release_name: ${{ github.event.pull_request.title }}
          body: ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false
          generate_release_notes: ${{ !github.event.pull_request.body }}
          files: |
            ./packages/*.tgz

      - uses: JS-DevTools/npm-publish@v3.0.1
        id: typescript-util
        with:
          token: ${{ secrets.NPM_AUTH_TOKEN }}
          package: './packages/typescript-util'
          access: public
      - run: echo ${{ steps.typescript-util.outputs.id }}

      - uses: JS-DevTools/npm-publish@v3.0.1
        id: util
        with:
          token: ${{ secrets.NPM_AUTH_TOKEN }}
          package: './packages/util'
          access: public
      - run: echo ${{ steps.util.outputs.id }}

      - uses: JS-DevTools/npm-publish@v3.0.1
        id: tools
        with:
          token: ${{ secrets.NPM_AUTH_TOKEN }}
          package: './packages/tools'
          access: public
      - run: echo ${{ steps.tools.outputs.id }}

      # - uses: CoolColdUK/github-script@v7
      #   if: github.event_name != 'workflow_dispatch'
      #   with:
      #     github-token: ${{secrets.GITHUB_TOKEN}}
      #     script: |
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'ðŸŽ‰ Release https://github.com/${{ github.repository }}/releases/tag/v${{ env.PACKAGE_VERSION }}'
      #       })
